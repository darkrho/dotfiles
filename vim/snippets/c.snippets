# main()
snippet main "main"
int main(int argc, const char *argv[])
{
	${1}
	return 0;
}
endsnippet

snippet mainn "mainn"
int main(void)
{
	${1}
	return 0;
}
endsnippet

# #include <...>
snippet inc "inc"
#include <${1:stdio}.h>${2}
endsnippet

# #include "..."
snippet Inc "Inc"
#include "${1:`!v Filename("$1.h")`}"${2}
endsnippet

# #ifndef ... #define ... #endif
snippet Def "Def"
#ifndef $1
#define ${1:SYMBOL} ${2:value}
#endif${3}
endsnippet

snippet def "def"
#define
endsnippet

snippet ifdef "ifdef"
#ifdef ${1:FOO}
	${2:#define }
#endif
endsnippet

snippet #if "#if"
#if ${1:FOO}
	${2}
#endif
endsnippet

# Header Include-Guard
snippet once "once"
#ifndef ${1:`!v toupper(Filename('$1_H', 'UNTITLED_H'))`}
#define $1
${2}
#endif /* end of include guard: $1 */
endsnippet

# If Condition
snippet if "if"
if (${1:/* condition */}) {
	${2:/* code */}
}
endsnippet

snippet el "el"
else {
	${1}
}
endsnippet

# Ternary conditional
snippet t "t"
${1:/* condition */} ? ${2:a} : ${3:b}
endsnippet

# Do While Loop
snippet do "do"
do {
	${2:/* code */}
} while (${1:/* condition */});
endsnippet

# While Loop
snippet wh "wh"
while (${1:/* condition */}) {
	${2:/* code */}
}
endsnippet

# For Loop
snippet for "for"
for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
	${4:/* code */}
}
endsnippet

# Custom For Loop
snippet forr "forr"
for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
	${5:/* code */}
}
endsnippet

# Function
snippet fun "fun"
${1:void} ${2:function_name}(${3})
{
	${4:/* code */}
}
endsnippet

# Function Declaration
snippet fund "fund"
${1:void} ${2:function_name}(${3});${4}
endsnippet

# Typedef
snippet td "td"
typedef ${1:int} ${2:MyCustomType};${3}
endsnippet

# Struct
snippet st "st"
struct ${1:`!v Filename('$1_t', 'name')`} {
	${2:/* data */}
}${3: /* optional variable list */};${4}
endsnippet

# Typedef struct
snippet tds "tds"
typedef struct ${2:_$1 }{
	${3:/* data */}
} ${1:`!v Filename('$1_t', 'name')`};
endsnippet

# Typdef enum
snippet tde "tde"
typedef enum {
	${1:/* data */}
} ${2:foo};
endsnippet

# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pr "pr"
printf("${1:%s}\n"${2});${3}
endsnippet

# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr "fpr"
fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
endsnippet

# This is kind of convenient
snippet . "."
[${1}]${2}
endsnippet


