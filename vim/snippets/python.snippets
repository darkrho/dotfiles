snippet #! "#!"
#!/usr/bin/env python
# -*- coding: utf-8 -*-
endsnippet

snippet imp "imp"
import ${1:module}
endsnippet

snippet from "from"
from ${1:package} import ${2:module}
endsnippet

# Module Docstring
snippet docs "docs"
"""
File: ${1:`!v Filename('$1.py', 'foo.py')`}
Author: ${2:`!v g:snips_author`}
Description: ${3}
"""
endsnippet

snippet wh "wh"
while ${1:condition}:
	${2:# code...}
endsnippet

snippet for "for"
for ${1:needle} in ${2:haystack}:
	${3:# code...}
endsnippet

# New Class
snippet cl "cl"
class ${1:ClassName}(${2:object}):
	"""${3:docstring for $1}"""
	def __init__(self, ${4:arg}):
		${5:super($1, self).__init__()}
		self.$4 = $4
		${6}
endsnippet

# New Function
snippet def "def"
def ${1:fname}(${2:`!v indent('.') ? 'self' : ''`}${3}):
	"""${4:docstring for $1}"""
	${5:pass}
endsnippet

# New Method
snippet deff "deff"
def ${1:fname}(${2:`!v indent('.') ? 'self' : ''`}${3}):
	${4:pass}
endsnippet

# magic method
snippet def_ "def_"
def __${1:init}__(${2:`!v indent('.') ? 'self' : ''`}${3}):
	${4:pass}
endsnippet

# New Property
snippet property "property"
def ${1:foo}():
	doc = "${2:The $1 property.}"
	def fget(self):
		${3:return self._$1}
	def fset(self, value):
		${4:self._$1 = value}
endsnippet

# return statement
snippet ret "ret"
return${1: var}
endsnippet

# Lambda: e.g. var = ld<tab>
snippet ld "ld"
lambda${1: vars}: ${2:action}
endsnippet

snippet . "."
self.
endsnippet

snippet try "Try/Except"
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
endsnippet

snippet try "Try/Except/Else"
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
else:
	${5:pass}
endsnippet

snippet try "Try/Except/Finally"
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
finally:
	${5:pass}
endsnippet

snippet try "Try/Except/Else/Finally"
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
else:
	${5:pass}
finally:
	${6:pass}
endsnippet

# if
snippet if "if"
if ${1:cond}:
	${2:pass}
endsnippet

# if/else
snippet ife "ife"
if ${1:cond}:
	${2:pass}
else:
	${3:pass}
endsnippet

# if __name__ == '__main__':
snippet ifmain "ifmain"
if __name__ == '__main__':
	${1:main()}
endsnippet

# __magic__
snippet _ "_"
__${1:init}__${2}
endsnippet

# iPython shortcut < 0.13
snippet ipshell "ipshell"
from IPython import Shell; Shell.IPShellEmbed([])()
endsnippet

# iPython embed >= 0.13
snippet ipyembed "ipyembed"
from IPython import embed; embed()
endsnippet

snippet ipytracer "ipytracer"
from IPython.core.debugger import Tracer; Tracer()()
endsnippet

# * and ** magic
snippet * "*"
*args
endsnippet

snippet ** "**"
**kwargs
endsnippet

snippet super "super"
super(${1:Foo}, self).${2:__init__}(${3})
endsnippet

# generic test case
snippet testcase "testcase"
class ${1:Foo}Test(TestCase):
	def test${2:Bar}(self):
		${3:pass}
endsnippet


